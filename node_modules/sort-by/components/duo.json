{
  "source.js": {
    "id": "source.js",
    "type": "js",
    "mtime": 1414877468097,
    "src": "// GENERATED FILE: DO NOT EDIT!\nrequire(\"./test/index.js\");\n",
    "deps": {
      "./test/index.js": "test/index.js"
    },
    "entry": true
  },
  "test/index.js": {
    "id": "test/index.js",
    "type": "js",
    "mtime": 1414877463000,
    "src": "'use strict';\ntry {\n    var assert = require('assert');\n} catch (e) {\n    var assert = require('component/assert');\n}\n\nvar sortBy = require('../');\nvar array = [];\n\narray.push({x: 4, y: 1, z: {a: 2}});\narray.push({x: 3, y: 1, z: {a: 3}});\narray.push({x: 2, y: 3, z: {a: 3}});\narray.push({x: 1, y: 2, z: {a: 1}});\n\ndescribe('Sort()', function () {\n    it('returns a function', function () {\n        assert(typeof sortBy() === 'function');\n    });\n});\n\ndescribe('Sort(prop)', function () {\n    it('sorts an array of objects using given property name', function () {\n        array.sort(sortBy('x'));\n        assert(array[0].x === 1);\n        assert(array[0].y === 2);\n        assert(array[3].x === 4);\n        assert(array[3].y === 1);\n    });\n});\n\ndescribe('Sort(prop, prop)', function () {\n    it('sorts an array of objects using multiple property names', function () {\n        array.sort(sortBy('y', 'x'));\n        assert(array[0].x === 3);\n        assert(array[0].y === 1);\n        assert(array[3].x === 2);\n        assert(array[3].y === 3);\n    });\n});\n\ndescribe('Sort(-prop)', function () {\n    it('reverses the sort order', function () {\n        array.sort(sortBy('-y', 'x'));\n        assert(array[0].x === 2);\n        assert(array[0].y === 3);\n        assert(array[3].x === 4);\n        assert(array[3].y === 1);\n    });\n});\n\ndescribe('Sort(prop.prop)', function () {\n    it('sorts an array of objects with nested properties', function () {\n        array.sort(sortBy('z.a', 'y'));\n        assert(array[0].x === 1);\n        assert(array[0].y === 2);\n        assert(array[3].x === 2);\n        assert(array[3].y === 3);\n    });\n});\n\ndescribe('Sort(-prop.prop)', function () {\n    it('reverse sorts an array of objects with nested properties', function () {\n        array.sort(sortBy('-z.a', 'y'));\n        assert(array[0].x === 3);\n        assert(array[0].y === 1);\n        assert(array[3].x === 1);\n        assert(array[3].y === 2);\n    });\n});",
    "deps": {
      "component/assert": "components/component-assert@0.5.0/index.js",
      "../": "index.js"
    }
  },
  "components/component-assert@0.5.0/index.js": {
    "id": "components/component-assert@0.5.0/index.js",
    "type": "js",
    "mtime": 1412680665000,
    "src": "\n/**\n * Module dependencies.\n */\n\nvar equals = require('equals');\nvar fmt = require('fmt');\nvar stack = require('stack');\n\n/**\n * Assert `expr` with optional failure `msg`.\n *\n * @param {Mixed} expr\n * @param {String} [msg]\n * @api public\n */\n\nmodule.exports = exports = function (expr, msg) {\n  if (expr) return;\n  throw error(msg || message());\n};\n\n/**\n * Assert `actual` is weak equal to `expected`.\n *\n * @param {Mixed} actual\n * @param {Mixed} expected\n * @param {String} [msg]\n * @api public\n */\n\nexports.equal = function (actual, expected, msg) {\n  if (actual == expected) return;\n  throw error(msg || fmt('Expected %o to equal %o.', actual, expected), actual, expected);\n};\n\n/**\n * Assert `actual` is not weak equal to `expected`.\n *\n * @param {Mixed} actual\n * @param {Mixed} expected\n * @param {String} [msg]\n * @api public\n */\n\nexports.notEqual = function (actual, expected, msg) {\n  if (actual != expected) return;\n  throw error(msg || fmt('Expected %o not to equal %o.', actual, expected));\n};\n\n/**\n * Assert `actual` is deep equal to `expected`.\n *\n * @param {Mixed} actual\n * @param {Mixed} expected\n * @param {String} [msg]\n * @api public\n */\n\nexports.deepEqual = function (actual, expected, msg) {\n  if (equals(actual, expected)) return;\n  throw error(msg || fmt('Expected %o to deeply equal %o.', actual, expected), actual, expected);\n};\n\n/**\n * Assert `actual` is not deep equal to `expected`.\n *\n * @param {Mixed} actual\n * @param {Mixed} expected\n * @param {String} [msg]\n * @api public\n */\n\nexports.notDeepEqual = function (actual, expected, msg) {\n  if (!equals(actual, expected)) return;\n  throw error(msg || fmt('Expected %o not to deeply equal %o.', actual, expected));\n};\n\n/**\n * Assert `actual` is strict equal to `expected`.\n *\n * @param {Mixed} actual\n * @param {Mixed} expected\n * @param {String} [msg]\n * @api public\n */\n\nexports.strictEqual = function (actual, expected, msg) {\n  if (actual === expected) return;\n  throw error(msg || fmt('Expected %o to strictly equal %o.', actual, expected), actual, expected);\n};\n\n/**\n * Assert `actual` is not strict equal to `expected`.\n *\n * @param {Mixed} actual\n * @param {Mixed} expected\n * @param {String} [msg]\n * @api public\n */\n\nexports.notStrictEqual = function (actual, expected, msg) {\n  if (actual !== expected) return;\n  throw error(msg || fmt('Expected %o not to strictly equal %o.', actual, expected));\n};\n\n/**\n * Assert `block` throws an `error`.\n *\n * @param {Function} block\n * @param {Function} [error]\n * @param {String} [msg]\n * @api public\n */\n\nexports.throws = function (block, err, msg) {\n  var threw;\n  try {\n    block();\n  } catch (e) {\n    threw = e;\n  }\n\n  if (!threw) throw error(msg || fmt('Expected %s to throw an error.', block.toString()));\n  if (err && !(threw instanceof err)) {\n    throw error(msg || fmt('Expected %s to throw an %o.', block.toString(), err));\n  }\n};\n\n/**\n * Assert `block` doesn't throw an `error`.\n *\n * @param {Function} block\n * @param {Function} [error]\n * @param {String} [msg]\n * @api public\n */\n\nexports.doesNotThrow = function (block, err, msg) {\n  var threw;\n  try {\n    block();\n  } catch (e) {\n    threw = e;\n  }\n\n  if (threw) throw error(msg || fmt('Expected %s not to throw an error.', block.toString()));\n  if (err && (threw instanceof err)) {\n    throw error(msg || fmt('Expected %s not to throw an %o.', block.toString(), err));\n  }\n};\n\n/**\n * Create a message from the call stack.\n *\n * @return {String}\n * @api private\n */\n\nfunction message() {\n  if (!Error.captureStackTrace) return 'assertion failed';\n  var callsite = stack()[2];\n  var fn = callsite.getFunctionName();\n  var file = callsite.getFileName();\n  var line = callsite.getLineNumber() - 1;\n  var col = callsite.getColumnNumber() - 1;\n  var src = get(file);\n  line = src.split('\\n')[line].slice(col);\n  var m = line.match(/assert\\((.*)\\)/);\n  return m && m[1].trim();\n}\n\n/**\n * Load contents of `script`.\n *\n * @param {String} script\n * @return {String}\n * @api private\n */\n\nfunction get(script) {\n  var xhr = new XMLHttpRequest;\n  xhr.open('GET', script, false);\n  xhr.send(null);\n  return xhr.responseText;\n}\n\n/**\n * Error with `msg`, `actual` and `expected`.\n *\n * @param {String} msg\n * @param {Mixed} actual\n * @param {Mixed} expected\n * @return {Error}\n */\n\nfunction error(msg, actual, expected){\n  var err = new Error(msg);\n  err.showDiff = 3 == arguments.length;\n  err.actual = actual;\n  err.expected = expected;\n  return err;\n}\n",
    "deps": {
      "equals": "components/jkroso-equals@1.0.0/index.js",
      "fmt": "components/yields-fmt@0.0.2/index.js",
      "stack": "components/component-stack@0.0.1/index.js"
    }
  },
  "components/yields-fmt@0.0.2/index.js": {
    "id": "components/yields-fmt@0.0.2/index.js",
    "type": "js",
    "mtime": 1386714383000,
    "src": "\n/**\n * Export `fmt`\n */\n\nmodule.exports = fmt;\n\n/**\n * Formatters\n */\n\nfmt.o = JSON.stringify;\nfmt.s = String;\nfmt.d = parseInt;\n\n/**\n * Format the given `str`.\n *\n * @param {String} str\n * @param {...} args\n * @return {String}\n * @api public\n */\n\nfunction fmt(str){\n  var args = [].slice.call(arguments, 1);\n  var j = 0;\n\n  return str.replace(/%([a-z])/gi, function(_, f){\n    return fmt[f]\n      ? fmt[f](args[j++])\n      : _ + f;\n  });\n}\n",
    "deps": {}
  },
  "components/component-stack@0.0.1/index.js": {
    "id": "components/component-stack@0.0.1/index.js",
    "type": "js",
    "mtime": 1349846180000,
    "src": "\n/**\n * Expose `stack()`.\n */\n\nmodule.exports = stack;\n\n/**\n * Return the stack.\n *\n * @return {Array}\n * @api public\n */\n\nfunction stack() {\n  var orig = Error.prepareStackTrace;\n  Error.prepareStackTrace = function(_, stack){ return stack; };\n  var err = new Error;\n  Error.captureStackTrace(err, arguments.callee);\n  var stack = err.stack;\n  Error.prepareStackTrace = orig;\n  return stack;\n}",
    "deps": {}
  },
  "index.js": {
    "id": "index.js",
    "type": "js",
    "mtime": 1414877062000,
    "src": "var objectPath = require('object-path');\nvar sortBy;\nvar sort;\n\n/**\n * Return a comparator function\n * @param  {String} property The key to sort by\n * @return {Function}        Returns the comparator function\n */\nsort = function sort(property) {\n    var sortOrder = 1;\n    var fn;\n\n    if (property[0] === \"-\") {\n        sortOrder = -1;\n        property = property.substr(1);\n    }\n\n    return function fn(a,b) {\n        var result;\n        if (objectPath.get(a, property) < objectPath.get(b, property)) result = -1;\n        if (objectPath.get(a, property) > objectPath.get(b, property)) result = 1;\n        if (objectPath.get(a, property) === objectPath.get(b, property)) result = 0;\n        return result * sortOrder;\n    }\n};\n\n/**\n * Return a comparator function that sorts by multiple keys\n * @return {Function} Returns the comparator function\n */\nsortBy = function sortBy() {\n    var properties = arguments;\n    var fn;\n\n    return function fn(obj1, obj2) {\n        var numberOfProperties = properties.length,\n            result = 0,\n            i = 0;\n\n        /* try getting a different result from 0 (equal)\n         * as long as we have extra properties to compare\n         */\n        while(result === 0 && i < numberOfProperties) {\n            result = sort(properties[i])(obj1, obj2);\n            i++;\n        }\n        return result;\n    };\n};\n\n/**\n * Expose `sortBy`\n * @type {Function}\n */\nmodule.exports = sortBy;",
    "deps": {
      "object-path": "components/mariocasciaro-object-path@v0.6.0/index.js"
    }
  },
  "components/mariocasciaro-object-path@v0.6.0/index.js": {
    "id": "components/mariocasciaro-object-path@v0.6.0/index.js",
    "type": "js",
    "mtime": 1405443668000,
    "src": "(function (root, factory){\n  'use strict';\n\n  /*istanbul ignore next:cant test*/\n  if (typeof module === 'object' && typeof module.exports === 'object') {\n    module.exports = factory();\n  } else if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([], factory);\n  } else {\n    // Browser globals\n    root.objectPath = factory();\n  }\n})(this, function(){\n  'use strict';\n\n  var\n    toStr = Object.prototype.toString,\n    _hasOwnProperty = Object.prototype.hasOwnProperty;\n\n  function isEmpty(value){\n    if (!value) {\n      return true;\n    }\n    if (isArray(value) && value.length === 0) {\n      return true;\n    } else {\n      for (var i in value) {\n        if (_hasOwnProperty.call(value, i)) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n\n  function toString(type){\n    return toStr.call(type);\n  }\n\n  function isNumber(value){\n    return typeof value === 'number' || toString(value) === \"[object Number]\";\n  }\n\n  function isString(obj){\n    return typeof obj === 'string' || toString(obj) === \"[object String]\";\n  }\n\n  function isObject(obj){\n    return typeof obj === 'object' && toString(obj) === \"[object Object]\";\n  }\n\n  function isArray(obj){\n    return typeof obj === 'object' && typeof obj.length === 'number' && toString(obj) === '[object Array]';\n  }\n\n  function isBoolean(obj){\n    return typeof obj === 'boolean' || toString(obj) === '[object Boolean]';\n  }\n\n  function getKey(key){\n    var intKey = parseInt(key);\n    if (intKey.toString() === key) {\n      return intKey;\n    }\n    return key;\n  }\n\n  function set(obj, path, value, doNotReplace){\n    if (isNumber(path)) {\n      path = [path];\n    }\n    if (isEmpty(path)) {\n      return obj;\n    }\n    if (isString(path)) {\n      return set(obj, path.split('.'), value, doNotReplace);\n    }\n    var currentPath = getKey(path[0]);\n\n    if (path.length === 1) {\n      var oldVal = obj[currentPath];\n      if (oldVal === void 0 || !doNotReplace) {\n        obj[currentPath] = value;\n      }\n      return oldVal;\n    }\n\n    if (obj[currentPath] === void 0) {\n      if (isNumber(currentPath)) {\n        obj[currentPath] = [];\n      } else {\n        obj[currentPath] = {};\n      }\n    }\n\n    return set(obj[currentPath], path.slice(1), value, doNotReplace);\n  }\n\n  function del(obj, path) {\n    if (isNumber(path)) {\n      path = [path];\n    }\n\n    if (isEmpty(obj)) {\n      return void 0;\n    }\n\n    if (isEmpty(path)) {\n      return obj;\n    }\n    if(isString(path)) {\n      return del(obj, path.split('.'));\n    }\n\n    var currentPath = getKey(path[0]);\n    var oldVal = obj[currentPath];\n\n    if(path.length === 1) {\n      if (oldVal !== void 0) {\n        if (isArray(obj)) {\n          obj.splice(currentPath, 1);\n        } else {\n          delete obj[currentPath];\n        }\n      }\n    } else {\n      if (obj[currentPath] !== void 0) {\n        return del(obj[currentPath], path.slice(1));\n      }\n    }\n\n    return obj;\n  }\n\n  var objectPath = {};\n\n  objectPath.ensureExists = function (obj, path, value){\n    return set(obj, path, value, true);\n  };\n\n  objectPath.set = function (obj, path, value, doNotReplace){\n    return set(obj, path, value, doNotReplace);\n  };\n\n  objectPath.insert = function (obj, path, value, at){\n    var arr = objectPath.get(obj, path);\n    at = ~~at;\n    if (!isArray(arr)) {\n      arr = [];\n      objectPath.set(obj, path, arr);\n    }\n    arr.splice(at, 0, value);\n  };\n\n  objectPath.empty = function(obj, path) {\n    if (isEmpty(path)) {\n      return obj;\n    }\n    if (isEmpty(obj)) {\n      return void 0;\n    }\n\n    var value, i;\n    if (!(value = objectPath.get(obj, path))) {\n      return obj;\n    }\n\n    if (isString(value)) {\n      return objectPath.set(obj, path, '');\n    } else if (isBoolean(value)) {\n      return objectPath.set(obj, path, false);\n    } else if (isNumber(value)) {\n      return objectPath.set(obj, path, 0);\n    } else if (isArray(value)) {\n      value.length = 0;\n    } else if (isObject(value)) {\n      for (i in value) {\n        if (_hasOwnProperty.call(value, i)) {\n          delete value[i];\n        }\n      }\n    } else {\n      return objectPath.set(obj, path, null);\n    }\n  };\n\n  objectPath.push = function (obj, path /*, values */){\n    var arr = objectPath.get(obj, path);\n    if (!isArray(arr)) {\n      arr = [];\n      objectPath.set(obj, path, arr);\n    }\n\n    arr.push.apply(arr, Array.prototype.slice.call(arguments, 2));\n  };\n\n  objectPath.coalesce = function (obj, paths, defaultValue) {\n    var value;\n\n    for (var i = 0, len = paths.length; i < len; i++) {\n      if ((value = objectPath.get(obj, paths[i])) !== void 0) {\n        return value;\n      }\n    }\n\n    return defaultValue;\n  };\n\n  objectPath.get = function (obj, path, defaultValue){\n    if (isNumber(path)) {\n      path = [path];\n    }\n    if (isEmpty(path)) {\n      return obj;\n    }\n    if (isEmpty(obj)) {\n      return defaultValue;\n    }\n    if (isString(path)) {\n      return objectPath.get(obj, path.split('.'), defaultValue);\n    }\n\n    var currentPath = getKey(path[0]);\n\n    if (path.length === 1) {\n      if (obj[currentPath] === void 0) {\n        return defaultValue;\n      }\n      return obj[currentPath];\n    }\n\n    return objectPath.get(obj[currentPath], path.slice(1), defaultValue);\n  };\n\n  objectPath.del = function(obj, path) {\n    return del(obj, path);\n  };\n\n  return objectPath;\n});",
    "deps": {}
  },
  "components/jkroso-equals@1.0.0/index.js": {
    "id": "components/jkroso-equals@1.0.0/index.js",
    "type": "js",
    "mtime": 1414566908000,
    "src": "var type = require('type')\n\n// (any, any, [array]) -> boolean\nfunction equal(a, b, memos){\n  // All identical values are equivalent\n  if (a === b) return true\n  var fnA = types[type(a)]\n  var fnB = types[type(b)]\n  return fnA && fnA === fnB\n    ? fnA(a, b, memos)\n    : false\n}\n\nvar types = {}\n\n// (Number) -> boolean\ntypes.number = function(a, b){\n  return a !== a && b !== b/*Nan check*/\n}\n\n// (function, function, array) -> boolean\ntypes['function'] = function(a, b, memos){\n  return a.toString() === b.toString()\n    // Functions can act as objects\n    && types.object(a, b, memos)\n    && equal(a.prototype, b.prototype)\n}\n\n// (date, date) -> boolean\ntypes.date = function(a, b){\n  return +a === +b\n}\n\n// (regexp, regexp) -> boolean\ntypes.regexp = function(a, b){\n  return a.toString() === b.toString()\n}\n\n// (DOMElement, DOMElement) -> boolean\ntypes.element = function(a, b){\n  return a.outerHTML === b.outerHTML\n}\n\n// (textnode, textnode) -> boolean\ntypes.textnode = function(a, b){\n  return a.textContent === b.textContent\n}\n\n// decorate `fn` to prevent it re-checking objects\n// (function) -> function\nfunction memoGaurd(fn){\n  return function(a, b, memos){\n    if (!memos) return fn(a, b, [])\n    var i = memos.length, memo\n    while (memo = memos[--i]) {\n      if (memo[0] === a && memo[1] === b) return true\n    }\n    return fn(a, b, memos)\n  }\n}\n\ntypes['arguments'] =\ntypes.array = memoGaurd(arrayEqual)\n\n// (array, array, array) -> boolean\nfunction arrayEqual(a, b, memos){\n  var i = a.length\n  if (i !== b.length) return false\n  memos.push([a, b])\n  while (i--) {\n    if (!equal(a[i], b[i], memos)) return false\n  }\n  return true\n}\n\ntypes.object = memoGaurd(objectEqual)\n\n// (object, object, array) -> boolean\nfunction objectEqual(a, b, memos) {\n  if (typeof a.equal == 'function') {\n    memos.push([a, b])\n    return a.equal(b, memos)\n  }\n  var ka = getEnumerableProperties(a)\n  var kb = getEnumerableProperties(b)\n  var i = ka.length\n\n  // same number of properties\n  if (i !== kb.length) return false\n\n  // although not necessarily the same order\n  ka.sort()\n  kb.sort()\n\n  // cheap key test\n  while (i--) if (ka[i] !== kb[i]) return false\n\n  // remember\n  memos.push([a, b])\n\n  // iterate again this time doing a thorough check\n  i = ka.length\n  while (i--) {\n    var key = ka[i]\n    if (!equal(a[key], b[key], memos)) return false\n  }\n\n  return true\n}\n\n// (object) -> array\nfunction getEnumerableProperties (object) {\n  var result = []\n  for (var k in object) if (k !== 'constructor') {\n    result.push(k)\n  }\n  return result\n}\n\nmodule.exports = equal\n",
    "deps": {
      "type": "components/jkroso-type@1.1.0/index.js"
    }
  },
  "components/jkroso-type@1.1.0/index.js": {
    "id": "components/jkroso-type@1.1.0/index.js",
    "type": "js",
    "mtime": 1392871670000,
    "src": "\nvar toString = {}.toString\nvar DomNode = typeof window != 'undefined'\n  ? window.Node\n  : Function\n\n/**\n * Return the type of `val`.\n *\n * @param {Mixed} val\n * @return {String}\n * @api public\n */\n\nmodule.exports = exports = function(x){\n  var type = typeof x\n  if (type != 'object') return type\n  type = types[toString.call(x)]\n  if (type) return type\n  if (x instanceof DomNode) switch (x.nodeType) {\n    case 1:  return 'element'\n    case 3:  return 'text-node'\n    case 9:  return 'document'\n    case 11: return 'document-fragment'\n    default: return 'dom-node'\n  }\n}\n\nvar types = exports.types = {\n  '[object Function]': 'function',\n  '[object Date]': 'date',\n  '[object RegExp]': 'regexp',\n  '[object Arguments]': 'arguments',\n  '[object Array]': 'array',\n  '[object String]': 'string',\n  '[object Null]': 'null',\n  '[object Undefined]': 'undefined',\n  '[object Number]': 'number',\n  '[object Boolean]': 'boolean',\n  '[object Object]': 'object',\n  '[object Text]': 'text-node',\n  '[object Uint8Array]': 'bit-array',\n  '[object Uint16Array]': 'bit-array',\n  '[object Uint32Array]': 'bit-array',\n  '[object Uint8ClampedArray]': 'bit-array',\n  '[object Error]': 'error',\n  '[object FormData]': 'form-data',\n  '[object File]': 'file',\n  '[object Blob]': 'blob'\n}\n",
    "deps": {}
  }
}